# Focus on other monitor: alt + {display}
alt - 1: yabai -m display --focus 1
alt - 2: yabai -m display --focus 2
alt - 3: yabai -m display --focus 3

# Balance size of windows
alt - 0: yabai -m space --balance

# Close the window
alt + shift - x: yabai -m window --close

# Toggle window zoom
alt - d: yabai -m window --toggle zoom-parent
alt - f: yabai -m window --toggle zoom-fullscreen

# Toggle window split type
alt - s: yabai -m window --toggle split

# Spawn a new Kitty terminal.
alt - t: $HOME/bin/kitty-spawn

# Spawn a new Emacs instance.
alt + shift - e: $HOME/bin/emacs-spawn

# Send window to other monitor: alt + shift + {display}
alt + shift - 1: yabai -m window --display 1; yabai -m display --focus 1
alt + shift - 2: yabai -m window --display 2; yabai -m display --focus 2
alt + shift - 3: yabai -m window --display 3; yabai -m display --focus 3

# Focus on a space: ctrl + cmd + {space}
ctrl + cmd - 1: yabai -m space --focus 1
ctrl + cmd - 2: yabai -m space --focus 2
ctrl + cmd - 3: yabai -m space --focus 3
ctrl + cmd - 4: yabai -m space --focus 4
ctrl + cmd - 5: yabai -m space --focus 5
ctrl + cmd - 6: yabai -m space --focus 6
ctrl + cmd - 7: yabai -m space --focus 7
ctrl + cmd - 8: yabai -m space --focus 8
ctrl + cmd - 9: yabai -m space --focus 9
ctrl + cmd - 0: yabai -m space --focus 10

# Send window to other space and focus: ctrl + shift + {space}
ctrl + shift - 1: yabai -m window --space 1; yabai -m space --focus 1
ctrl + shift - 2: yabai -m window --space 2; yabai -m space --focus 2
ctrl + shift - 3: yabai -m window --space 3; yabai -m space --focus 3
ctrl + shift - 4: yabai -m window --space 4; yabai -m space --focus 4
ctrl + shift - 5: yabai -m window --space 5; yabai -m space --focus 5
ctrl + shift - 6: yabai -m window --space 6; yabai -m space --focus 6
ctrl + shift - 7: yabai -m window --space 7; yabai -m space --focus 7
ctrl + shift - 8: yabai -m window --space 8; yabai -m space --focus 8
ctrl + shift - 9: yabai -m window --space 9; yabai -m space --focus 9
ctrl + shift - 0: yabai -m window --space 10; yabai -m space --focus 10

# Switch focus between windows: alt + [arrow]
alt - up: yabai -m window --focus north
alt - down: yabai -m window --focus south
alt - left: yabai -m window --focus west
alt - right: yabai -m window --focus east

# Reserving the vim-like keybindings for neovim and tmux.
# alt - k: yabai -m window --focus north
# alt - j: yabai -m window --focus south
# alt - h: yabai -m window --focus west
# alt - l: yabai -m window --focus east

# Toggle window properties: alt + shift + ([f]loating, [t]opmost)
alt + shift - f: yabai -m window --toggle float
alt + shift - t: yabai -m window --toggle topmost

# Resize window: alt + shift + [arrow]
alt + shift - left: yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0

alt + shift - right: yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

alt + shift - up: yabai -m window --resize top:0:-100 || yabai -m window --resize bottom:0:-100

alt + shift - down: yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100

# Swap windows: ctrl + alt + [arrow]
ctrl + alt - left: yabai -m window --warp west
ctrl + alt - right: yabai -m window --warp east
ctrl + alt - up: yabai -m window --warp north
ctrl + alt - down: yabai -m window --warp south

ctrl - n: yabai -m window --focus stack.next
# Focus window up/down in stack
ctrl - p: yabai -m window --focus stack.prev

# Add the active window to the window or stack to the {direction}
# Note that this only works when the active window does *not* already belong to a stack
cmd + ctrl - left: yabai -m window west --stack $(yabai -m query --windows --window | jq -r '.id')
cmd + ctrl - down: yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
cmd + ctrl - up: yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
cmd + ctrl - right: yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')

# Cycle focus the window (conflict with emacs)
# alt - x: yabai -m window --focus next || yabai -m window --focus first

# Cycle swap the window (conflict with emacs)
# alt - c: yabai -m window --swap next || yabai -m window --swap first

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west

# swap managed window
# alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# float / unfloat window and center on screen
# alt - t : yabai -m window --toggle float;\
#           yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
